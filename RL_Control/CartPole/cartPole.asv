close all
clear variables
clc

%% Notes
% No need to use k-means to determine the center mu of each RBF

%% Variables and parameters
cartDefs;
global cart;
% System physic parameters
g = cart.g; % Gravity acceleration [m/s^2]

% State: X =[x th v w]
% State space
numberOfState = 4; % Position and velocity
initialStateSpace = [0; cart.initialAngle; 0; cart.initialAngularVelocity]; % Column vector
% Action space --> we can apply any action
actionSpace = [- inf, + inf];

% SPSA parameters
c = 10;
a = 10;
alpha = 1;
gamma = 1/6;
c_k = 0; % = perturbation size
N_H = 10;
delta = 0;
JDelta = [];
Delta = [];

%Time
number_of_episode = 3000;
t_i = 0; % [s]
dt = cart.dT; % [s]
timeout = cart.tf; % [s] = final execution time

% Random seed
% time = clock;
% seed = time(6);
rng(50);

% Misc parameters
now = 1;
after = 2;
angle = [0, 0];
angularVelocity = [0, 0];
reward = 0;
plot_rewards = zeros(number_of_episode, 1);
index = 1;
plotActive = 0;
debugActive = 0;
fig1 = figure;
%% Center and variance computation
row = 1;
angle_step = (2* cart.maximumAngle) / (cart.discret_angle - 1);
angularVelocity_step = (cart.maximumAngularVelocity * 2) / (cart.discret_angularVelocity - 1);
sigma_position = angle_step / sqrt(2 * cart.number_of_centrum);
sigma_velocity = angularVelocity_step / sqrt(2 * cart.number_of_centrum);

% [sigma_angle, sigma_angularVelocity]
for i= - cart.maximumAngle : angle_step : cart.maximumAngle
    for j = - cart.maximumAngularVelocity : angularVelocity_step : cart.maximumAngularVelocity
        cart.mu(row, :) = [i,j];
        row = row + 1;
    end
end

for i = 1 : cart.number_of_centrum
    cart.sigma(i,:) = [sigma_position, sigma_velocity];
end

scatter(cart.mu(:,1), cart.mu(:,2));
%% Design of the net
number_of_input = 2; % Number of neurons in the input layer (u_i)
number_of_hidden_layer = 1; % Number of hidden layers
number_of_hidden_neuron = cart.number_of_centrum; % Number of neurons for each hidden layer x_j
number_of_output = 1; % Number of neurons in the output layer (v_k)

% Random initialization of the weights with value [-1,+1]
% Row: hidden neuron - bias neuron, Column: input neuron
w_in_hid = ones(number_of_hidden_neuron, number_of_input); % Weigths between input and hidden layer: ALWAYS FIXED TO 1
% Row: output neuron, Column: hidden neuron
w_hid_out =  -1 + (1+1)*rand(number_of_output, number_of_hidden_neuron);

%% Algorithm

k = 0;
for episode = 1:number_of_episode
    for i = 1:N_H
        %%%%%%%%%%%%%% Print debug %%%%%%%%%%%%%%%%%%%%
        if debugActive == 1
            fprintf('Some debug here')
        end
        
        s_0 = initialStateSpace;
        delta = Bernoulli(0.5, number_of_centrum);
        c_k = c /(k + 1)^gamma;
        
        %%%%%%%%%%%%%% Rollouts %%%%%%%%%%%%%%%%%%%%
        J_plus = Rollout(state, (W + c_k * delta));
        J_minus = Rollout(state, (W - c_k * delta));
        
        JDelta = [JDelta; (J_plus - J_minus)];
        Delta = [Delta; c_k * delta];
    end
    cartPlot(h, q)
    a_k = a / (k + 1)^alpha;
    w_hid_out = w_hid_out + 0.5  * a_k * inv(Delta' * Delta) * Delta' * JDelta;
    k = k +1;
end

